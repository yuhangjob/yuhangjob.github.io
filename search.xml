<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[code-push和code-push-server热更新上传到七牛云及阿里云]]></title>
    <url>%2Fcode-push%E5%92%8Ccode-push-server%E7%83%AD%E6%9B%B4%E6%96%B0%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%2F</url>
    <content type="text"><![CDATA[一、自建 CodePush 服务CodePush 服务主要分为三个部分：服务端、客户端、React Native 项目。 服务端服务端需要使用 code-push-server 和MySQL 所以需要先将这两个安装好。 1.安装MySQL官网下载后直接双击安装，下载地址；打开“系统设置”，看到最新安装的MySQL，进入并启动服务。 2.安装 code-push-server 作者发布了两种安装方式（npm安装或源码安装），在此我推荐使用源码安装，为后期我们要基于这个服务修改自己的网页，源码安装方便些。 (1)、下载code-push-server代码1234// clone代码git clone https://github.com/lisong/code-push-server.git// 进入项目并安装资源cd code-push-server &amp;&amp; npm install (2)、修改config/config.js 文件，在 db 对象中添加数据库信息，参考如下：12345678910db: &#123; username: process.env.RDS_USERNAME || "root", password: process.env.RDS_PASSWORD || "admin123",//你的MySQL访问密码,如果没有就null database: process.env.DATA_BASE || "codepush",//如果你init的时候指定了数据库名字的话，也需要改 host: process.env.RDS_HOST || "127.0.0.1", port: process.env.RDS_PORT || 3306, dialect: "mysql", logging: false, operatorsAliases: false, &#125;, (3)、创建数据库表1./bin/db init --dbhost localhost --dbuser root --dbpassword admin123 --dbname codepush 为了演示我重新创建一个 (4)、配置打包后的，bundle存储地址，这里配置loal本地也可以配置qiniu和OSS创建storage和data文件夹，用来保存打包好的资源，供用户更新下载，downloadUrl地址必须为服务器所在的地址，不然用户无法下载到包。主要配置如下： 七牛对象储存地址 123456qiniu: &#123; accessKey: "", //个人面板 &gt; 秘钥管理 &gt; AK secretKey: "", //个人面板 &gt; 秘钥管理 &gt; SK bucketName: "faweapp",//储存空间名称 downloadUrl: "http://babi.lhsea.com" //绑定的域名 &#125;, 阿里云对象储存 12345678oss: &#123; accessKeyId: "", secretAccessKey: "", endpoint: "https://oss-cn-qingdao.aliyuncs.com", bucketName: "babizhibo",//储存空间名称 prefix: "storage", // 目录文件夹名称 downloadUrl: "http://babizhibo.oss-cn-qingdao.aliyuncs.com/storage", //下载地址 &#125;, config.js文件路径：code-push-server/config/config.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283var os = require('os');var config = &#123;&#125;;config.development = &#123; // Config for database, only support mysql. db: &#123; username: process.env.RDS_USERNAME || "root", password: process.env.RDS_PASSWORD || "admin123",//你的MySQL访问密码,如果没有就null database: process.env.DATA_BASE || "codepush",//如果你init的时候指定了数据库名字的话，也需要改 host: process.env.RDS_HOST || "127.0.0.1", port: process.env.RDS_PORT || 3306, dialect: "mysql", logging: false, operatorsAliases: false, &#125;, // Config for qiniu (http://www.qiniu.com/) cloud storage when storageType value is "qiniu". qiniu: &#123; accessKey: "", secretKey: "", bucketName: "faweapp", downloadUrl: "http://babi.lhsea.com" // Binary files download host address.http://pby2wik41.bkt.clouddn.com/Fi_BSD0I9yokJRdors-4LsZucE4_ &#125;, // Config for Amazon s3 (https://aws.amazon.com/cn/s3/) storage when storageType value is "s3". s3: &#123; accessKeyId: process.env.AWS_ACCESS_KEY_ID, secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY, sessionToken: process.env.AWS_SESSION_TOKEN, //(optional) bucketName: process.env.BUCKET_NAME, region: process.env.REGION, downloadUrl: process.env.DOWNLOAD_URL, // binary files download host address. &#125;, // Config for Aliyun OSS (https://www.aliyun.com/product/oss) when storageType value is "oss". oss: &#123; accessKeyId: "", secretAccessKey: "", endpoint: "https://oss-cn-qingdao.aliyuncs.com", bucketName: "babizhibo", prefix: "storage", // Key prefix in object key downloadUrl: "http://babizhibo.oss-cn-qingdao.aliyuncs.com/storage", // binary files download host address. &#125;, // Config for tencentyun COS (https://cloud.tencent.com/product/cos) when storageType value is "oss". tencentcloud: &#123; accessKeyId: "", secretAccessKey: "", bucketName: "", region: "", downloadUrl: "", // binary files download host address. &#125;, // Config for local storage when storageType value is "local". local: &#123; // Binary files storage dir, Do not use tmpdir and it's public download dir. storageDir: process.env.STORAGE_DIR || "/Users/mac/Desktop/workspaces/storage", //文件下载地址 CodePush Server 地址 + '/download' download对应app.js里面的地址 downloadUrl: process.env.LOCAL_DOWNLOAD_URL || "http://localhost:3000/download",//注意此地方是否是你的本机ip地址(如果是模拟器的话，无须更改） // public static download spacename. public: '/download' &#125;, jwt: &#123; // Recommended: 63 random alpha-numeric characters // Generate using: https://www.grc.com/passwords.htm tokenSecret: process.env.TOKEN_SECRET ||'fnoQkK2w9zEp2Sj03lYaGCkWDgkVEvaTqrYPxbaZvq2MM3ivnXKNMLzrn96MTmn' &#125;, common: &#123; /* * tryLoginTimes is control login error times to avoid force attack. * if value is 0, no limit for login auth, it may not safe for account. when it's a number, it means you can * try that times today. but it need config redis server. */ tryLoginTimes: 0, // CodePush Web(https://github.com/lisong/code-push-web) login address. //codePushWebUrl: "http://127.0.0.1:3001/login", // create patch updates's number. default value is 3 diffNums: 3, // data dir for caclulate diff files. it's optimization. dataDir: process.env.DATA_DIR || "/Users/mac/Desktop/workspaces/data", // storageType which is your binary package files store. options value is ("local" | "qiniu" | "s3"| "oss" || "tencentcloud") //选择存储类型，目前支持local,oss,qiniu,s3配置 storageType: process.env.STORAGE_TYPE || "qiniu", // options value is (true | false), when it's true, it will cache updateCheck results in redis. updateCheckCache: false, // options value is (true | false), when it's true, it will cache rollout results in redis rolloutClientUniqueIdCache: false, &#125;, (5)、改好之后，启动服务1./bin/www 在浏览其中输入：http://127.0.0.1:3000 能加载到CodePushServer登录界面即表示启动成功。点击登录，输入用户名：admin和密码：123456点击登录，然后点击获取token： (6)、进入项目根目录1cd /Users/mac/Desktop/RNCPProject (7)、登入1code-push login http://127.0.0.1:3000 会自动打开浏览器登录,获取token,把获取到的token粘贴过来, 回车 查看 1whoami (8)、添加一个应用123testApp //应用名称code-push app add testApp ios react-nativecode-push app add testApp android react-native (9)、配置Xcode info.plist 把我们获取的Staging对应的CodePushDeploymentKey填到上面就行了。 (10)、运行Xcode 启动项目以更改导航标题为示例 (11)、更改项目执行123456789101112code-push release-react testApp ios//发布命令（打包文件并上传到服务器）$ code-push release-react &lt;appName&gt; &lt;OS&gt; &lt;updateContents&gt; &lt;deploymentNmae&gt; &lt;description&gt; &lt;disabled&gt; &lt;mandatory&gt;&lt;appName&gt; //必须 app名称&lt;OS&gt; //必须 发布平台iOS/Android&lt;updateContents&gt; //非必须 Bundle文件所在目录&lt;targetBinaryVersion&gt; //非必须 需要热更的app 版本&lt;deploymentNmae&gt; //必须 需要发布的部署&lt;description&gt; //非必须 描述 (更新客户端不可见必须有"hide" eg: --description "hide xxxx")&lt;disabled&gt; //非必须 该版本客户端是否可以获得更新,默认为false&lt;mandatory&gt; //非必须 如果有则表示app强制更新 1234567//查看历史版本code-push deployment history &lt;应用名&gt; Staging/Productioncode-push deployment history testApp Staging//清空历史版本code-push deployment clear testApp Staging//查看keycode-push deployment ls testApp -k 二、集成CodePush SDKAndroid下面我们通过如下步骤在Android项目中集成CodePush。 第一步：在项目中安装 react-native-code-push插件，终端进入你的项目根目录然后运行1npm install --save react-native-code-push 第二步：在Android project中安装插件。CodePush提供了两种方式：RNPM 和 Manual，本次演示所使用的是RNPM。运行npm i -g rnpm，来安装RNPM。 在React Native v0.27及以后版本RNPM已经被集成到了 React Native CL中，就不需要再进行安装了 第三步： 运行 rnpm link react-native-code-push。这条命令将会自动帮我们在anroid文件中添加好设置。 在终端运行此命令之后，终端会提示让你输入deployment key，这是你只需将你的deployment Staging key输入进去即可，如果不输入则直接单击enter跳过即可。 第四步： 在 android/app/build.gradle文件里面添如下代码：1apply from: "../../node_modules/react-native-code-push/android/codepush.gradle" 然后在/android/settings.gradle中添加如下代码: 12include ':react-native-code-push'project(':react-native-code-push').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-code-push/android/app') 第五步: 运行code-push deployment -k ls &lt;appName&gt;获取 部署秘钥。默认的部署名是 staging，所以 部署秘钥（deployment key ） 就是 staging。第六步： 添加配置。当APP启动时我们需要让app向CodePush咨询JS bundle的所在位置，这样CodePush就可以控制版本。更新 MainApplication.java文件：1234567891011121314151617181920212223242526public class MainApplication extends Application implements ReactApplication &#123; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override protected boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected String getJSBundleFile() &#123; return CodePush.getJSBundleFile(); &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; // 3. Instantiate an instance of the CodePush runtime and add it to the list of // existing packages, specifying the right deployment key. If you don't already // have it, you can run "code-push deployment ls &lt;appName&gt; -k" to retrieve your key. return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new CodePush("deployment-key-here", MainApplication.this, BuildConfig.DEBUG) ); &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125;&#125; 关于deployment-key的设置 在上述代码中我们在创建CodePush实例的时候需要设置一个deployment-key,因为deployment-key分生产环境与测试环境两种,所以建议大家在build.gradle中进行设置。在build.gradle中的设置方法如下: 打开android/app/build.gradle文件,找到android { buildTypes {} }然后添加如下代码即可: 1234567891011121314151617181920212223android &#123; ... buildTypes &#123; debug &#123; ... // CodePush updates should not be tested in Debug mode ... &#125; releaseStaging &#123; ... buildConfigField "String", "CODEPUSH_KEY", '"&lt;INSERT_STAGING_KEY&gt;"' ... &#125; release &#123; ... buildConfigField "String", "CODEPUSH_KEY", '"&lt;INSERT_PRODUCTION_KEY&gt;"' ... &#125; &#125; ...&#125; 心得:另外,我们也可以将deployment-key存放在local.properties中: 12code_push_key_production=erASzHa1-wTdODdPJDh6DBF2Jwo94JFH08Kvbcode_push_key_staging=mQY75RkFbX6SiZU1kVT1II7OqWst4JFH08Kvb 如图: ![local.properties存放codepush-key.png](https://upload-images.jianshu.io/upload_images/1319536-0aa6703f3bdf5621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 然后在就可以在android/app/build.gradle可以通过下面方式来引用它了: 12345678910111213141516171819202122232425Properties properties = new Properties()properties.load(project.rootProject.file('local.properties').newDataInputStream())android &#123; ... buildTypes &#123; debug &#123; ... // CodePush updates should not be tested in Debug mode ... &#125; releaseStaging &#123; ... buildConfigField "String", "CODEPUSH_KEY", '"'+properties.getProperty("code_push_key_production")+'"' ... &#125; release &#123; ... buildConfigField "String", "CODEPUSH_KEY", '"'+properties.getProperty("code_push_key_staging")+'"' ... &#125; &#125; ...&#125; 在android/app/build.gradle设置好deployment-key之后呢,我们就可以这样使用了: 12345678@Overrideprotected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( ... new CodePush(BuildConfig.CODEPUSH_KEY, MainApplication.this, BuildConfig.DEBUG), // Add/change this line. ... );&#125; 第七步：修改versionName。在 android/app/build.gradle中有个android.defaultConfig.versionName属性，我们需要把 应用版本改成 1.0.0（默认是1.0，但是codepush需要三位数）。 12345android&#123; defaultConfig&#123; versionName "1.0.0" &#125;&#125; 至此Code Push for Android的SDK已经集成完成。 iOSCodePush官方提供RNPM、CocoaPods与手动三种在iOS项目中集成CodePush的方式，接下来我就以RNPM的方式来讲解一下如何在iOS项目中集成CodePush。 第一步：在项目中安装react-native-code-push插件，终端进入你的项目根目录然后运行1npm install --save react-native-code-push 第二步： 运行rnpm link react-native-code-push。这条命令将会自动帮我们在ios中添加好设置。 在终端运行此命令之后，终端会提示让你输入deployment key，这是你只需将你的deployment Staging key输入进去即可，如果不输入则直接单击enter跳过即可。 关于deployment-key的设置在我们想CodePush注册App的时候，CodePush会给我们两个deployment-key分别是在生产环境与测试环境时使用的，我们可以通过如下步骤来设置deployment-key。 1.用Xcode 打开项目 ➜ Xcode的项目导航视图中的PROJECT下选择你的项目 ➜ 选择Info页签 ➜ 在Configurations节点下单击 + 按钮 ➜ 选择Duplicate &quot;Release ➜ 输入Staging(名称可以自定义)； 2.然后选择Build Settings页签 ➜ 单击 + 按钮然后选择添加User-Defined Setting 3.然后输入CODEPUSH_KEY(名称可以自定义) 提示：你可以通过code-push deployment ls &lt;APP_NAME&gt; -k命令来查看deployment key。 4.打开 Info.plist文件，在CodePushDeploymentKey列的Value中输入$(CODEPUSH_KEY) 参考: https://www.jianshu.com/p/ca4beb5973bb https://www.jianshu.com/p/417a165ca9d7 React Native应用部署/热更新-CodePush最新集成总结(新)]]></content>
      <categories>
        <category>ReactNative</category>
      </categories>
      <tags>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS AFNetworking 3.0 上传图片视频到服务器]]></title>
    <url>%2FiOS-AFNetworking-3-0-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[基于AFNetworking 3.0图片上传的封装 .h1234567891011typedef NS_ENUM(NSUInteger, ResposeStyle) &#123; JSON, XML, Data,&#125;;typedef NS_ENUM(NSUInteger, RequestStyle) &#123; RequestJSON, RequestString, RequestDefault&#125;; .m @param url 服务器地址 @param parameters 字典 token @param fileData 要上传的数据 @param name 服务器参数名称 后台给你 @param fileName 文件名称 图片:xxx.jpg,xxx.png 视频:video.mov @param mimeType 文件类型 图片:image/jpg,image/png 视频:video/quicktime @param style 返回的数据类型 @param progress @param success @param failure 123456789101112131415161718192021222324252627282930313233343536373839404142434445+ (void)upLoadToUrlString:(NSString *)url parameters:(NSDictionary *)parameters fileData:(NSData *)fileData name:(NSString *)name fileName:(NSString *)fileName mimeType:(NSString *)mimeType response:(ResposeStyle)style progress:(void (^)(NSProgress *))progress success:(void (^)(NSURLSessionDataTask *, id))success failure:(void (^)(NSURLSessionDataTask *, NSError *))failure &#123; //1.获取单例的网络管理对象 AFHTTPSessionManager *manager = [AFHTTPSessionManager manager]; //2.根据style 的类型 去选择返回值得类型 switch (style) &#123; case JSON: manager.responseSerializer = [AFJSONResponseSerializer serializer]; break; case XML: manager.responseSerializer = [AFXMLParserResponseSerializer serializer]; break; case Data: manager.responseSerializer = [AFHTTPResponseSerializer serializer]; break; default: break; &#125; //3.设置相应数据支持的类型 [manager.responseSerializer setAcceptableContentTypes:[NSSet setWithObjects:@"application/json", @"text/json", @"text/javascript",@"text/html",@"text/css",@"text/plain", @"application/javascript",@"application/json", @"application/x-www-form-urlencoded", nil]]; [manager POST:url parameters:parameters constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; _Nonnull formData) &#123; [formData appendPartWithFileData:fileData name:name fileName:fileName mimeType:mimeType]; &#125; progress:^(NSProgress * _Nonnull uploadProgress) &#123; &#125; success:^(NSURLSessionDataTask * _Nonnull task, id _Nullable responseObject) &#123; if (success) &#123; success(task, responseObject); &#125; &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123; if (failure) &#123; failure(task, error); &#125; &#125;];&#125; PS:上传图片前，必须先压缩图片，不然图片过大，可能会导致上传失败！ 具体上传操作:传送门]]></content>
      <categories>
        <category>iOS开发记录</category>
      </categories>
      <tags>
        <tag>Object-C</tag>
      </tags>
  </entry>
</search>
